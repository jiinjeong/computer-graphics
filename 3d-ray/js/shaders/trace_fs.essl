Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
  precision highp float;

  out vec4 fragmentColor;

  in vec3 rayDir;

  uniform struct {
    vec4 lightPosition[12];
    vec3 powerDensity[12];
  } lighting;

  uniform struct {
    vec3 position;
    mat4 viewProjMatrix;
  } camera;

  uniform struct {
    mat4 surfaces[16];
    mat4 clippers[16];
    sampler2D sandImg;
    vec3 reflectances[16];
    vec4 kds[16]; // rgb is surface color
    vec4 kss[16]; // rgb is spec highlight color, w is shininess 
  } scene;


  uniform samplerCube envmap;

  float intersectQuadric(mat4 A, vec4 e, vec4 d) {
    float a = dot(d * A, d);
    float b = dot(d * A, e) + dot(e * A, d);
    float c = dot(e * A, e);
    
    float discriminant = b*b-4.0*a*c;

    if (discriminant < 0.0){
      return -1.0;
    }
    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
    float t2 = (-b - sqrt(discriminant)) / (2.0 * a);
    return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));
  }

  float intersectClippedQuadric(mat4 A, vec4 e, vec4 d, mat4 B) {
    float a = dot(d * A, d);
    float b = dot(d * A, e) + dot(e * A, d);
    float c = dot(e * A, e);
    
    float discriminant = b*b-4.0*a*c;

    if (discriminant < 0.0){
      return -1.0;
    }
    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
    float t2 = (-b - sqrt(discriminant)) / (2.0 * a);

    // Hit points. (Intersection)
    vec4 r1 = e + d * t1;
    vec4 r2 = e + d * t2;
    // Discard.
    if (dot(r1 * B, r1) > 0.0){
      t1 = -1.0;
    }
    if (dot(r2 * B, r2) > 0.0){
      t2 = -1.0;
    }
    return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));
  }

  float intersectClippedQuadricPink(mat4 A, vec4 e, vec4 d, mat4 B) {
    float a = dot(d * A, d);
    float b = dot(d * A, e) + dot(e * A, d);
    float c = dot(e * A, e);
    
    float discriminant = b*b-4.0*a*c;

    if (discriminant < 0.0){
      return -1.0;
    }
    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
    float t2 = (-b - sqrt(discriminant)) / (2.0 * a);

    // Hit points. (Intersection)
    vec4 r1 = e + d * t1;
    vec4 r2 = e + d * t2;
    // Discard.
    if (dot(r1 * B, r1) > 0.0){
      t1 = -1.0;
    }
    if (dot(r2 * B, r2) > 0.0){
      t2 = -1.0;
    }

    // 
    if (fract(r1.x) + (fract(r1.y)) < 0.5){
      t1 = -1.0;
    }
    if (fract(r2.x) + (fract(r2.y)) < 0.5){
      t2 = -1.0;
    }

    return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));
  }

  bool findBestHit(vec4 e, vec4 d, out float bestT, out int bestIndex){
    bestT = 9001.0;

    for(int i=0; i<16; i++){
      float t;
      if (i == 11) {
        t = intersectClippedQuadricPink(scene.surfaces[i], e, d, scene.clippers[i]);
      }
      else {
        t = intersectClippedQuadric(scene.surfaces[i], e, d, scene.clippers[i]);
      }

      if (t < bestT && t > 0.0){
        bestT = t;
        bestIndex = i;
      }
    }
    if (bestT < 9001.0){
      return true;
    }
    return false;
  }

  vec3 noiseGrad(vec3 r) {
    vec3 s = vec3(7502, 22777, 4767);
    vec3 f = vec3(0.0, 0.0, 0.0);
    for(int i=0; i<16; i++) {
      f += cos( dot(s - vec3(32768, 32768, 32768), r*40.0)
                     / 65536.0) * (s - vec3(32768, 32768, 32768)) * 40.0;
      s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
    }
    return f / 65536.0;
  }

  void main(void) {
  	vec4 e = vec4(camera.position, 1);		//< ray origin
  	vec4 d = vec4(normalize(rayDir), 0);	//< ray direction
    vec3 w = vec3(1, 1, 1);

    for (int j=0; j<4; j++){
      float bestT;
      int bestIndex;
      bool bestHit = findBestHit(e, d, bestT, bestIndex);

      if (length(w) < 0.01){
        break;
      }


      if (!bestHit) {
        // nothing hit by ray, return enviroment color
    	  fragmentColor = vec4(w, 1.0) * texture(envmap, d.xyz );
        gl_FragDepth = 0.9999999;
        break;
      }

      else {
        // computing depth from world space hit coordinates 
        vec4 hit = e + d * bestT;
        vec3 normal = normalize( (hit * scene.surfaces[bestIndex] + scene.surfaces[bestIndex] * hit).xyz );
        
        if( dot(normal, d.xyz) > 0.0 ){
          normal = -normal;
        }

        /************** WAVES **************/
        if (bestIndex == 0){
          normal += noiseGrad(hit.xyz) * 0.001;
          normal = normalize(normal);
        }

        /****************** COLORS ******************/
        for (int k = 0; k < 4; k++) {
          vec3 lightDiff = lighting.lightPosition[k].xyz - hit.xyz * lighting.lightPosition[k].w;
          vec3 lightDirection = normalize(lightDiff);
   
          /************** SHADOW **************/
          vec4 shE = vec4(normal, 0) * 0.01 + hit;  // origin
          vec4 shD = vec4(lightDirection, 0);  // direction

          float lightBestT;
          int lightBestIndex;
          bool shadow = findBestHit(shE, shD, lightBestT, lightBestIndex);

          if (shadow){
            if (length(hit.xyz - lighting.lightPosition[k].xyz) > lightBestT * lighting.lightPosition[k].w){
              continue;
            }
          }
          
          /************** DIFFUSE & PHONG-BLING **************/
          vec3 powerDensity = lighting.powerDensity[k].rgb / pow(length(lightDiff), 2.0);
          vec3 halfway = normalize(lightDirection - d.xyz);
          vec4 surfaceColor = scene.kds[bestIndex];
          vec4 specularHighlight = scene.kss[bestIndex];

          if (bestIndex == 3){
            if (fract(atan(hit.z, hit.x) * 5.0) < 0.5){
              fragmentColor += vec4(1, 0.8, 0.2, 1);
            } 
            else {
              fragmentColor += vec4(0.2, 0.5, 1, 1);
            }
          }

          else if (bestIndex == 10) {
            surfaceColor = texture(scene.sandImg, vec2(hit.x, hit.z) * 0.1);
            fragmentColor.rgb += w * powerDensity * surfaceColor.rgb * max(0.0, dot(normal, lightDirection));
          }

          else {
            fragmentColor.rgb += w * powerDensity * surfaceColor.rgb * max(0.0, dot(normal, lightDirection));
            }

            fragmentColor.rgb += w * powerDensity * specularHighlight.rgb * pow(max(dot(normal, halfway), 0.0), specularHighlight.w);
            fragmentColor.a = 1.0;
            // fragmentColor = vec4(1, 0, 0, 1);
          }

          vec4 ndcHit = hit * camera.viewProjMatrix;
          gl_FragDepth = ndcHit.z / ndcHit.w * 0.5 + 0.5;

          /************** REFLECTION **************/
          w *= scene.reflectances[bestIndex];
          e = hit;
          e.xyz += normal * 0.01;
          d.xyz = reflect(d.xyz, normal);
      }
    }
  }
`;