Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
precision highp float;

out vec4 fragmentColor;
in vec2 texCoord; // pass this on from vertex shader
in vec4 worldPosition;
in vec4 worldNormal;

uniform samplerCube envmapTexture;

uniform struct {
  vec4 lightPosition[12];
  vec3 powerDensity[12];
} lighting;

// we need to bind texture to this
uniform sampler2D colorTexture;
uniform vec3 specularColor;
uniform float shininess;

uniform struct  {
  vec3 position;
} camera;

void main(void) {
  vec3 normal = normalize(worldNormal.xyz);
  vec3 position = worldPosition.xyz / worldPosition.w;
    vec3 viewDir = normalize(camera.position - position);

    //  vec3 lightDiff = lighting.lightPosition[i].xyz - position * lighting.lightPosition[i].w;
  //  vec3 lightDirection = normalize(lightDiff);
    //  vec3 powerDensity = lighting.powerDensity[i].rgb / pow(length(lightDiff), 2.0);
    //  vec3 halfway = normalize(lightDirection + viewDir);

  fragmentColor.rgb += texture( envmapTexture, reflect(-viewDir, normal)).rgb;
  fragmentColor.a = 1.0;
}
`;
