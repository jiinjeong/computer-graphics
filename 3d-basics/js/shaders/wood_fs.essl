Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
precision highp float;

out vec4 fragmentColor;
in vec2 texCoord; // pass this on from vertex shader
in vec4 worldPosition;
in vec4 worldNormal;
in vec4 modelPosition;

float snoise(vec3 r) {
	vec3 s = vec3(7502, 22777, 4767);
	float f = 0.0;
	for(int i=0; i<16; i++) {
	  f += sin( dot(s - vec3(32768, 32768, 32768), r)
	                                 / 65536.0);
	  s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	}
	return f / 32.0 + 0.5;
}

void main(void) {
  vec3 lightDirection = vec3(1, 1, 1);
  // if you make it vec4, you can do texCoord.xy to get just the two.

  const float freq = 10.0;  // Frequency ()
  const float noiseFreq = 25.0;  // 
  const float noiseExp = 5.0;  // Sharper
  const float noiseAmp = 12.0;  // Wavy

  float w = fract( modelPosition.x * freq
   + pow(
     snoise(modelPosition.xyz * noiseFreq),
     noiseExp)
     * noiseAmp
  );

  const vec4 lightWoodColor = vec4(1.0, 1.0, 0.9, 0);
  const vec4 darkWoodColor = vec4(0.5, 0.3, 0, 0);

  vec3 color = mix( lightWoodColor.rgb, 
                    darkWoodColor.rgb, w);

  fragmentColor.rgb = color;
  fragmentColor.a = 1.0;

}
`;
